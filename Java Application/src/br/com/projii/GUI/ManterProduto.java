/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.projii.GUI;

import br.com.projii.controller.CategoriaController;
import br.com.projii.controller.ProdutoController;
import br.com.projii.jpa.Categoria;
import br.com.projii.jpa.Produto;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author dj002
 */
public class ManterProduto extends javax.swing.JPanel {

    private ProdutoController produtoController = null;
    private CategoriaController categoriaController = null;

    /**
     * Creates new form ManterProduto
     */
    public ManterProduto() {
        initComponents();
        atualizarJTProduto();
        ajustaTablePreferences();
        atualizarComboBoxes();
    }

    private void ajustaTablePreferences() {
//        jTProduto.setSize(1500, 300);
        jTProduto.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTProduto.getColumnModel().getColumn(1).setPreferredWidth(200);

    }

    public void atualizarComboBoxes() {
        try {
            if (categoriaController == null) {
                categoriaController = new CategoriaController();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao conectar com o servidor...");
            return;
        }
        List<Categoria> categorias = categoriaController.findAll();

        jCBCategoria.removeAllItems();
        for (Categoria categoria : categorias) {
            jCBCategoria.addItem(categoria.getNome());
        }

    }

    public void atualizarJTProduto() {
        try {
            if (produtoController == null) {
                produtoController = new ProdutoController();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao conectar com o servidor...");
            return;
        }
        Produto[] filiais = produtoController.findAll().toArray(new Produto[0]);
        Object[][] objects = new Object[filiais.length][6];
        for (int i = 0; i < filiais.length; i++) {
            objects[i][0] = filiais[i].getId();
            objects[i][1] = filiais[i].getNome();
            objects[i][2] = filiais[i].getDescricao();
            objects[i][3] = filiais[i].getEspecificacao();
            objects[i][4] = filiais[i].getPreco();
            objects[i][5] = filiais[i].getCategoriaId();
        }
        jTProduto.setModel(new javax.swing.table.DefaultTableModel(
                objects,
                new String[]{
            "id", "Nome", "Descrição", "Especificação", "Preço", "Categoria"
        }));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTFId = new javax.swing.JTextField();
        jTFNome = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTProduto = new javax.swing.JTable();
        jBCadastrar = new javax.swing.JButton();
        jBExcluir = new javax.swing.JButton();
        jBAlterar = new javax.swing.JButton();
        jBLimpar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTADescricao = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTFPreco = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTAEspecificacao = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jCBCategoria = new javax.swing.JComboBox();

        setPreferredSize(new java.awt.Dimension(490, 400));
        setRequestFocusEnabled(false);

        jLabel1.setText("id");

        jLabel2.setText("nome");

        jTFId.setEditable(false);

        jTFNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFNomeActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1000, 280));

        jTProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nome", "descrição", "especificação", "preço", "categoria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTProdutoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTProduto);

        jBCadastrar.setText("Cadastrar");
        jBCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadastrarActionPerformed(evt);
            }
        });

        jBExcluir.setText("Excluir");
        jBExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExcluirActionPerformed(evt);
            }
        });

        jBAlterar.setText("Alterar");
        jBAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlterarActionPerformed(evt);
            }
        });

        jBLimpar.setText("Limpar");
        jBLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimparActionPerformed(evt);
            }
        });

        jLabel4.setText("descrição");

        jTADescricao.setColumns(20);
        jTADescricao.setRows(5);
        jScrollPane2.setViewportView(jTADescricao);

        jLabel5.setText("especificação");

        jLabel3.setText("preço");

        jTAEspecificacao.setColumns(20);
        jTAEspecificacao.setRows(5);
        jScrollPane4.setViewportView(jTAEspecificacao);

        jLabel6.setText("categoria");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTFNome, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTFId, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane2, jTFId, jTFNome, jTFPreco});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTFNome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFPreco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jCBCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBExcluir)
                    .addComponent(jBLimpar)
                    .addComponent(jBCadastrar)
                    .addComponent(jBAlterar))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5});

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void limpaTxts() {
        jTFId.setText("");
        jTFNome.setText("");
        jTFPreco.setText("");
        jTADescricao.setText("");
        jTAEspecificacao.setText("");
        atualizarComboBoxes();
    }
    private void jTProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTProdutoMouseClicked
        limpaTxts();
        int linha = jTProduto.getSelectedRow();
        //pegar conteudo da linha no banco de dados e jogar nos jtf
        if (!(jTProduto.getValueAt(linha, 0) == null)) {
            jTFId.setText(jTProduto.getValueAt(linha, 0).toString());
        }
        if (!(jTProduto.getValueAt(linha, 1) == null)) {
            jTFNome.setText(jTProduto.getValueAt(linha, 1).toString());
        }
        if (!(jTProduto.getValueAt(linha, 2) == null)) {
            jTADescricao.setText(jTProduto.getValueAt(linha, 2).toString());
        }
        if (!(jTProduto.getValueAt(linha, 3) == null)) {
            jTAEspecificacao.setText(jTProduto.getValueAt(linha, 3).toString());
        }
        if (!(jTProduto.getValueAt(linha, 4) == null)) {
            jTFPreco.setText(jTProduto.getValueAt(linha, 4).toString());
        }
        String aux = jTProduto.getValueAt(linha, 5).toString();
        long id = Long.parseLong(aux);
        //inicio da logica da categoria
        try {
            if (categoriaController == null) {
                categoriaController = new CategoriaController();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao conectar com o servidor...");
            return;
        }
        List<Categoria> categorias = categoriaController.findAll();
        for (Categoria categoria : categorias) {
            if (id == categoria.getId()){
                jCBCategoria.setSelectedItem(categoria.getNome());
            }
        }
        //fim da logica da categoria

    }//GEN-LAST:event_jTProdutoMouseClicked

    private void jBLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimparActionPerformed
        limpaTxts();
    }//GEN-LAST:event_jBLimparActionPerformed

    private void jBCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadastrarActionPerformed
        Produto produto = null;
        try {
            produto = new Produto(jTFNome.getText());
            produto.setDescricao(jTADescricao.getText());
            produto.setEspecificacao(jTAEspecificacao.getText());
            produto.setPreco(Double.parseDouble(jTFPreco.getText()));
            //logica de categoria
            try {
                if (categoriaController == null) {
                    categoriaController = new CategoriaController();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao conectar com o servidor...");
                return;
            }
            List<Categoria> categorias = categoriaController.findAll();
            for (Categoria categoria : categorias) {
                if (categoria.getNome().equals(
                        jCBCategoria.getSelectedItem().toString())) {
                    produto.setCategoriaId(categoria.getId());
                }
            }
            //fim da logica da categoria
            try {
                if (produtoController == null) {
                    produtoController = new ProdutoController();
                }
                produtoController.create(produto);
                atualizarJTProduto();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao gravar Produto: " + produto);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro Formulario mal preenchido",
                    "System Mack", 2);
        }

        limpaTxts();
    }//GEN-LAST:event_jBCadastrarActionPerformed

    private void jBExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExcluirActionPerformed
        try {
            if (produtoController == null) {
                produtoController = new ProdutoController();
            }
            Object id = jTProduto.getValueAt(jTProduto.getSelectedRow(), 0);
            Produto produto = produtoController.find(id);
            produtoController.delete(produto);
            atualizarJTProduto();
            limpaTxts();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao deletar o Produto");
        }
    }//GEN-LAST:event_jBExcluirActionPerformed

    private void jBAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlterarActionPerformed
        Produto produto = null;
        try {
            if (produtoController == null) {
                produtoController = new ProdutoController();
            }
            Object id = jTProduto.getValueAt(jTProduto.getSelectedRow(), 0);
            produto = produtoController.find(id);
            produto.setNome(jTFNome.getText());
            produto.setDescricao(jTADescricao.getText());
            produto.setEspecificacao(jTAEspecificacao.getText());
            produto.setPreco(Double.parseDouble(jTFPreco.getText()));
            //logica de categoria
            try {
                if (categoriaController == null) {
                    categoriaController = new CategoriaController();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao conectar com o servidor...");
                return;
            }
            List<Categoria> categorias = categoriaController.findAll();
            for (Categoria categoria : categorias) {
                if (categoria.getNome().equals(
                        jCBCategoria.getSelectedItem().toString())) {
                    produto.setCategoriaId(categoria.getId());
                }
            }
            //fim da logica da categoria
            try {
                produtoController.update(produto);
                atualizarJTProduto();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao Alterar o usuario");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro Formulario mal preenchido",
                    "System Mack", 2);
        }
        limpaTxts();
    }//GEN-LAST:event_jBAlterarActionPerformed

    private void jTFNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFNomeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAlterar;
    private javax.swing.JButton jBCadastrar;
    private javax.swing.JButton jBExcluir;
    private javax.swing.JButton jBLimpar;
    private javax.swing.JComboBox jCBCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTADescricao;
    private javax.swing.JTextArea jTAEspecificacao;
    private javax.swing.JTextField jTFId;
    private javax.swing.JTextField jTFNome;
    private javax.swing.JTextField jTFPreco;
    private javax.swing.JTable jTProduto;
    // End of variables declaration//GEN-END:variables
}
